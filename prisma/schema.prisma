// prisma/schema.prisma
// GreaseDesk Core v1.2
// Last edited: 2025-10-31 12:15 Europe/London

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id               String         @id @default(uuid())
  group_name       String
  trading_name     String?
  company_number   String?
  vat_number       String?
  address          String?
  billing_email    String
  is_franchise_grp Boolean        @default(false)
  created_at       DateTime       @default(now())

  billing          GroupBilling?
  features         GroupFeature[]
  sites            Site[]
  roles            Role[]
  users            User[]
  customers        Customer[]
  vehicles         Vehicle[]
  services         ServiceCatalogue[]
  parts            PartCatalogue[]
  tax_rates        TaxRate[]
  audit_logs       AuditLog[]
}

model GroupBilling {
  id               String   @id @default(uuid())
  group_id         String   @unique
  plan_name        String
  status           BillingStatus
  retention_months Int
  included_sites   Int
  active_sites_cnt Int      @default(1)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  group            Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
}

enum BillingStatus {
  ok
  grace
  suspended
}

model GroupFeature {
  id         String   @id @default(uuid())
  group_id   String
  feature_key String
  enabled    Boolean  @default(false)

  group      Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@unique([group_id, feature_key])
}

model Site {
  id            String         @id @default(uuid())
  group_id      String
  site_name     String
  trading_name  String?
  company_number String?
  vat_number    String?
  address       String?
  phone         String?
  email         String?
  timezone      String         @default("Europe/London")
  currency_code String         @default("GBP")
  locale        String         @default("en-GB")
  is_franchise  Boolean        @default(false)
  is_active     Boolean        @default(true)
  created_at    DateTime       @default(now())

  group         Group          @relation(fields: [group_id], references: [id], onDelete: Cascade)
  features      SiteFeature[]
  profit_centres ProfitCentre[]
  users         User[]
  customers     Customer[]
  bookings      Booking[]
}

model SiteFeature {
  id          String  @id @default(uuid())
  site_id     String
  feature_key String
  enabled     Boolean @default(false)

  site        Site    @relation(fields: [site_id], references: [id], onDelete: Cascade)

  @@unique([site_id, feature_key])
}

model ProfitCentre {
  id         String   @id @default(uuid())
  site_id    String
  name       String
  type       String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())

  site       Site     @relation(fields: [site_id], references: [id], onDelete: Cascade)
  job_cards  JobCard[]
  bookings   Booking[]
}

model Role {
  id          String   @id @default(uuid())
  group_id    String
  name        String
  description String?
  permissions Json     @default("{}")

  group       Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  users       User[]
}

model User {
  id           String   @id @default(uuid())
  group_id     String
  site_id      String?
  role_id      String
  email        String   @unique
  password_hash String
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())

  group        Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  site         Site?    @relation(fields: [site_id], references: [id], onDelete: SetNull)
  role         Role     @relation(fields: [role_id], references: [id], onDelete: Restrict)
  job_cards    JobCard[] @relation("JobCardMechanic")
  audit_logs   AuditLog[]
}

model Customer {
  id         String   @id @default(uuid())
  group_id   String
  site_id    String
  name       String
  phone      String?
  email      String?
  notes      String?
  created_at DateTime @default(now())

  group      Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  site       Site     @relation(fields: [site_id], references: [id], onDelete: Cascade)
  vehicles   Vehicle[]
  bookings   Booking[]
  job_cards  JobCard[]
}

model Vehicle {
  id               String   @id @default(uuid())
  group_id         String
  customer_id      String
  registration     String
  vin              String?
  make             String?
  model            String?
  derivative       String?
  fuel_type        String?
  transmission     String?
  engine_code      String?
  year             Int?
  mileage_at_create Int?
  created_at       DateTime @default(now())

  group            Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  customer         Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  bookings         Booking[]
  job_cards        JobCard[]
}

model ServiceCatalogue {
  id                       String   @id @default(uuid())
  group_id                 String
  site_id                  String?
  service_code             String?
  name                     String
  description              String?
  default_duration_minutes Int?
  default_labour_rate      Decimal?
  default_price            Decimal?
  vat_rate                 Decimal? @default(20.00)
  is_active                Boolean  @default(true)
  created_at               DateTime @default(now())

  group                    Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  site                     Site?    @relation(fields: [site_id], references: [id], onDelete: Cascade)
  bookings                 Booking[]
}

model PartCatalogue {
  id          String   @id @default(uuid())
  group_id    String
  part_number String
  description String?
  brand       String?
  cost_price  Decimal?
  sell_price  Decimal?
  vat_rate    Decimal? @default(20.00)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())

  group       Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
}

model TaxRate {
  id         String   @id @default(uuid())
  group_id   String
  name       String?
  percentage Decimal
  valid_from DateTime
  valid_to   DateTime?

  group      Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
}

model Booking {
  id               String   @id @default(uuid())
  group_id         String
  site_id          String
  profit_centre_id String
  customer_id      String
  vehicle_id       String
  booking_date     DateTime
  start_time       DateTime?
  end_time         DateTime?
  service_id       String?
  resource_id      String?
  resource_type    String?
  status           String   @default("booked")
  created_at       DateTime @default(now())

  group            Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  site             Site     @relation(fields: [site_id], references: [id], onDelete: Cascade)
  profit_centre    ProfitCentre @relation(fields: [profit_centre_id], references: [id], onDelete: Cascade)
  customer         Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  vehicle          Vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  service          ServiceCatalogue? @relation(fields: [service_id], references: [id], onDelete: SetNull)
}

model JobCard {
  id                   String   @id @default(uuid())
  group_id             String
  site_id              String
  profit_centre_id     String
  customer_id          String
  vehicle_id           String
  status               String   @default("open")
  mechanic_assigned_id String?
  odometer_in          Int?
  odometer_out         Int?
  labour_bill_numeric  Decimal? @default(0)
  labour_cost_numeric  Decimal? @default(0)
  parts_bill_numeric   Decimal? @default(0)
  parts_cost_numeric   Decimal? @default(0)
  completed_at         DateTime?
  archived_at          DateTime?
  signed_off_by_customer Boolean @default(false)
  signed_off_at        DateTime?
  created_at           DateTime @default(now())

  group                Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  site                 Site     @relation(fields: [site_id], references: [id], onDelete: Cascade)
  profit_centre        ProfitCentre @relation(fields: [profit_centre_id], references: [id], onDelete: Cascade)
  customer             Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  vehicle              Vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
  mechanic_assigned    User?    @relation("JobCardMechanic", fields: [mechanic_assigned_id], references: [id], onDelete: SetNull)
  photos               JobCardPhoto[]
  items                JobCardItem[]
}

model JobCardPhoto {
  id          String   @id @default(uuid())
  job_card_id String
  photo_type  String?
  file_url    String
  uploaded_by String?
  uploaded_at DateTime @default(now())

  job_card    JobCard  @relation(fields: [job_card_id], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [uploaded_by], references: [id], onDelete: SetNull)
}

model JobCardItem {
  id          String   @id @default(uuid())
  job_card_id String
  item_type   ItemType
  description String
  qty         Decimal  @default(1)
  unit_cost   Decimal  @default(0)
  unit_price  Decimal  @default(0)
  vat_rate    Decimal  @default(20.00)
  vat_amount  Decimal  @default(0)
  created_at  DateTime @default(now())

  job_card    JobCard  @relation(fields: [job_card_id], references: [id], onDelete: Cascade)
}

enum ItemType {
  labour
  part
  misc
}

model AuditLog {
  id         String   @id @default(uuid())
  group_id   String
  user_id    String?
  entity     String
  entity_id  String
  action     String
  diff_json  Json?
  created_at DateTime @default(now())

  group      Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
}
